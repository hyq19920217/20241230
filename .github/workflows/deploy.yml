name: Deploy to Server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    
    env:
      MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Deploy files
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          source: "*.html,*.php,config.php,db.php,nginx/**,vendor/**,composer.json,composer.lock,db/**"
          target: "/usr/share/nginx/html"
      
      - name: Configure Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            # 设置文件权限
            chown -R nginx:nginx /usr/share/nginx/html/
            chmod 755 /usr/share/nginx/html/*.html
            chmod 755 /usr/share/nginx/html/*.php
            chmod 644 /usr/share/nginx/html/nginx/*.conf
            
            # 创建并设置临时目录权限
            sudo mkdir -p /usr/share/nginx/html/tmp
            sudo chown -R nginx:nginx /usr/share/nginx/html/tmp
            sudo chmod 755 /usr/share/nginx/html/tmp
            
            # 设置目录权限
            sudo chmod 755 /usr/share/nginx/html/vendor
            sudo chmod 755 /usr/share/nginx/html/db
            sudo chmod 644 /usr/share/nginx/html/db/*
            sudo chmod 644 /usr/share/nginx/html/vendor/**/*
            
            # 复制并应用 nginx 配置
            if [ -f /usr/share/nginx/html/nginx/nginx.conf ]; then
              cp /usr/share/nginx/html/nginx/nginx.conf /etc/nginx/nginx.conf
              # 检查配置是否正确
              if nginx -t; then
                echo "Nginx configuration is valid"
              else
                echo "Nginx configuration is invalid"
                exit 1
              fi
            fi 

      - name: Install PHP and extensions
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            # 安装必要的 PHP 版本和扩展
            sudo yum install -y php81-php php81-php-fpm \
              php81-php-gd php81-php-mbstring \
              php81-php-xml php81-php-dom \
              php81-php-zip \
              php81-php-pdo \
              php81-php-mysqlnd \
              php81-php-xmlreader \
              php81-php-xmlwriter

      - name: Set permissions
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            # 创建必要的目录
            sudo mkdir -p /var/opt/remi/php81/run/php-fpm/
            sudo mkdir -p /var/opt/remi/php81/log/php-fpm/
            
            # 设置权限
            sudo chown -R nginx:nginx /var/opt/remi/php81/run/php-fpm/
            sudo chown -R nginx:nginx /var/opt/remi/php81/log/php-fpm/ 

      - name: Configure PHP
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          env:
            MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          script: |
            # 设置环境变量
            echo "$MYSQL_ROOT_PASSWORD" | sudo tee /etc/mysql_root_password
            sudo chown nginx:nginx /etc/mysql_root_password
            sudo chmod 600 /etc/mysql_root_password
            
            # 配置 PHP-FPM
            sudo sed -i 's/user = apache/user = nginx/g' /etc/opt/remi/php81/php-fpm.d/www.conf
            sudo sed -i 's/group = apache/group = nginx/g' /etc/opt/remi/php81/php-fpm.d/www.conf
            sudo sed -i 's/listen = .*/listen = 127.0.0.1:9000/g' /etc/opt/remi/php81/php-fpm.d/www.conf
            sudo sed -i 's/listen.owner = apache/listen.owner = nginx/g' /etc/opt/remi/php81/php-fpm.d/www.conf
            sudo sed -i 's/listen.group = apache/listen.group = nginx/g' /etc/opt/remi/php81/php-fpm.d/www.conf
            
            # 配置环境变量
            echo "env[MYSQL_ROOT_PASSWORD] = $MYSQL_ROOT_PASSWORD" | sudo tee -a /etc/opt/remi/php81/php-fpm.d/www.conf
            
            # 添加更多调试信息
            sudo sed -i 's/;catch_workers_output = .*/catch_workers_output = yes/' /etc/opt/remi/php81/php-fpm.d/www.conf
            sudo sed -i 's/;php_admin_value\[error_log\].*/php_admin_value[error_log] = \/var\/opt\/remi\/php81\/log\/php-fpm\/$pool.error.log/' /etc/opt/remi/php81/php-fpm.d/www.conf
            sudo sed -i 's/;php_admin_flag\[log_errors\].*/php_admin_flag[log_errors] = on/' /etc/opt/remi/php81/php-fpm.d/www.conf
            
            # 配置 PHP 错误日志
            sudo sed -i 's/;error_log = php_errors.log/error_log = \/var\/opt\/remi\/php81\/log\/php-fpm\/error.log/' /etc/opt/remi/php81/php.ini
            sudo sed -i 's/error_reporting = E_ALL & ~E_DEPRECATED & ~E_STRICT/error_reporting = E_ALL/' /etc/opt/remi/php81/php.ini
            sudo sed -i 's/display_errors = Off/display_errors = On/' /etc/opt/remi/php81/php.ini
            sudo sed -i 's/log_errors = Off/log_errors = On/' /etc/opt/remi/php81/php.ini
            
            # 设置错误日志权限
            sudo mkdir -p /var/opt/remi/php81/log/php-fpm/
            sudo chown -R nginx:nginx /var/opt/remi/php81/log/php-fpm/
            sudo chmod 755 /var/opt/remi/php81/log/php-fpm/
            sudo chmod 644 /var/opt/remi/php81/log/php-fpm/error.log || true
            
            # 配置文件上传
            sudo sed -i 's/upload_max_filesize = .*/upload_max_filesize = 20M/' /etc/opt/remi/php81/php.ini
            sudo sed -i 's/post_max_size = .*/post_max_size = 21M/' /etc/opt/remi/php81/php.ini
            sudo sed -i 's/memory_limit = .*/memory_limit = 256M/' /etc/opt/remi/php81/php.ini
            sudo sed -i 's/max_execution_time = .*/max_execution_time = 300/' /etc/opt/remi/php81/php.ini
            sudo sed -i 's/max_input_time = .*/max_input_time = 300/' /etc/opt/remi/php81/php.ini
            sudo sed -i 's/;upload_tmp_dir =/upload_tmp_dir = \/usr\/share\/nginx\/html\/tmp/' /etc/opt/remi/php81/php.ini
            
            # 确保临时目录存在并有正确权限
            sudo mkdir -p /usr/share/nginx/html/tmp
            sudo chown -R nginx:nginx /usr/share/nginx/html/tmp
            sudo chmod 777 /usr/share/nginx/html/tmp
            
            # 重启前检查 PHP-FPM 配置
            sudo /opt/remi/php81/root/sbin/php-fpm --test || {
                echo "PHP-FPM configuration test failed"
                exit 1
            }
            
            # 重启所有服务
            echo "Restarting services..."
            sudo systemctl restart php81-php-fpm || {
                echo "Failed to restart PHP-FPM"
                exit 1
            }
            
            # 等待 PHP-FPM 完全启动
            sleep 5
            
            sudo systemctl restart nginx || {
                echo "Failed to restart Nginx"
                exit 1
            }
            
            # 验证服务状态
            echo "Checking service status..."
            echo "PHP-FPM socket file:"
            ls -la /var/opt/remi/php81/run/php-fpm/
            sudo systemctl status php81-php-fpm
            sudo systemctl status nginx
            
            # 检查日志文件权限
            echo "Checking log files..."
            ls -la /var/opt/remi/php81/log/php-fpm/
            ls -la /var/log/nginx/

            # 安装 Composer 依赖
            cd /usr/share/nginx/html
            /usr/bin/php81 -v  # 检查 PHP 版本
            /usr/bin/php81 /usr/local/bin/composer install --no-dev
            /usr/bin/php81 /usr/local/bin/composer dump-autoload -o

      - name: Initialize Database
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          env:
            MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          script: |
            # 测试数据库连接
            if ! mysql -uroot -p$MYSQL_ROOT_PASSWORD -e "SELECT 1"; then
                echo "Database connection failed"
                exit 1
            fi
            
            # 检查数据库是否存在
            if ! mysql -uroot -p$MYSQL_ROOT_PASSWORD -e "USE content_db"; then
                echo "Creating database..."
                mysql -uroot -p$MYSQL_ROOT_PASSWORD -e "CREATE DATABASE IF NOT EXISTS content_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
            fi
            
            # 导入数据库结构
            sudo mysql -uroot -p$MYSQL_ROOT_PASSWORD content_db < /usr/share/nginx/html/db/init.sql 
            
            # 检查数据库表是否创建成功
            echo "Checking database tables..."
            mysql -uroot -p$MYSQL_ROOT_PASSWORD content_db -e "SHOW TABLES;" 